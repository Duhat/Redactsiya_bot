const { Markup } = require("telegraf");

function editorHandler(bot, db, MODERATOR_ID) {
  const userStates = {};
  console.log("editor handler loaded");

  bot.command("submit", async (ctx) => {
    console.log("–ö–æ–º–∞–Ω–¥–∞ /submit –≤—ã–∑–≤–∞–Ω–∞");
    userStates[ctx.from.id] = {
      step: "waiting_title",
    };
    return await ctx.replyWithMarkdown(
      "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏*\n\n" + "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:"
    );
  });

  bot.on("text", async (ctx, next) => {
    const text = ctx.message?.text;
    if (!text || text.startsWith('/')) return next();
  
    const userId = ctx.from.id;
    const state = userStates[userId];
    if (!state) return next();
  
    switch (state.step) {
      case "waiting_title":
        state.title = text;
        state.step = "waiting_link";
        return await ctx.replyWithMarkdown(
          "üîó *–®–∞–≥ 2 –∏–∑ 3*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`https://example.com/article`"
        );
      case "waiting_link":
        if (!text.startsWith("http")) {
          return await ctx.replyWithMarkdown(
            "‚ùå *–û—à–∏–±–∫–∞!*\n\n–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `http://` –∏–ª–∏ `https://`\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
          );
        }
        state.link = text;
        state.step = "waiting_description";
        return await ctx.replyWithMarkdown(
          "üìÑ *–®–∞–≥ 3 –∏–∑ 3*\n\n–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):"
        );
      case "waiting_description":
        if (text.length > 200) {
          return await ctx.replyWithMarkdown(
            "‚ùå *–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!*\n\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 200 —Å–∏–º–≤–æ–ª–æ–≤\n\n–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞:"
          );
        }
        state.description = text;
  
        const newArticle = {
          id: Date.now(),
          title: state.title,
          link: state.link,
          description: state.description,
          status: "pending",
          author: userId,
          createdAt: new Date().toISOString(),
        };
  
        db.get("articles").push(newArticle).write();
  
        await bot.telegram.sendMessage(
          MODERATOR_ID,
          `üìù *–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!*\n\n` +
            `üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${state.title}\n` +
            `üîó –°—Å—ã–ª–∫–∞: ${state.link}\n` +
            `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${state.description}`,
          Markup.inlineKeyboard([
            [Markup.button.callback("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", `approve_${newArticle.id}`)],
            [Markup.button.callback("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", `reject_${newArticle.id}`)],
          ])
        );
  
        delete userStates[userId];
        return await ctx.replyWithMarkdown(
          "‚úÖ *–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
        );
    }
  });

  bot.action(/approve_(\d+)/, async (ctx) => {
    try {
      if (ctx.from.id !== MODERATOR_ID) {
        await ctx.answerCbQuery("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", {
          show_alert: true,
        });
        return;
      }

      const articleId = parseInt(ctx.match[1]);
      const article = db.get("articles").find({ id: articleId }).value();

      if (!article) {
        await ctx.answerCbQuery("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", {
          show_alert: true,
        });
        return;
      }

      db.get("articles")
        .find({
          id: articleId,
        })
        .assign({
          status: "approved",
          moderatedAt: new Date().toISOString(),
        })
        .write();

      try {
        await bot.telegram.sendMessage(
          article.author,
          `‚úÖ –í–∞—à–∞ —Å—Ç–∞—Ç—å—è –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n` +
            `üìå "${article.title}"\n` +
            `üîó ${article.link}`
        );
      } catch (err) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞:", err);
      }

      await ctx.editMessageText(
        `‚úÖ –°—Ç–∞—Ç—å—è –æ–¥–æ–±—Ä–µ–Ω–∞:\n\n` +
          `üìå "${article.title}"\n` +
          `üîó ${article.link}`,
        {
          parse_mode: "Markdown",
        }
      );

      await ctx.answerCbQuery();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏:", err);
      await ctx.answerCbQuery("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", {
        show_alert: true,
      });
    }
  });

  bot.action(/reject_(\d+)/, async (ctx) => {
    try {
      if (ctx.from.id !== MODERATOR_ID) {
        await ctx.answerCbQuery("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", {
          show_alert: true,
        });
        return;
      }

      const articleId = parseInt(ctx.match[1]);
      const article = db.get("articles").find({ id: articleId }).value();

      if (!article) {
        await ctx.answerCbQuery("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", {
          show_alert: true,
        });
        return;
      }

      try {
        await bot.telegram.sendMessage(
          article.author,
          `‚ùå –°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:\n\n` +
            `üìå "${article.title}"\n` +
            `üîó ${article.link}\n\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è`
        );
      } catch (err) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞:", err);
      }

      db.get("articles")
        .remove({
          id: articleId,
        })
        .write();

      await ctx.editMessageText(
        `‚ùå –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞:\n\n` + `üìå "${article.title}"`,
        {
          parse_mode: "Markdown",
        }
      );

      await ctx.answerCbQuery();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:", err);
      await ctx.answerCbQuery("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", {
        show_alert: true,
      });
    }
  });
}
module.exports = { editorHandler };
