const { Markup } = require("telegraf");

function moderatorHandler(bot, db, MODERATOR_ID) {
    // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    bot.command("modpanel", async (ctx) => {
        try {
            if (ctx.from.id !== MODERATOR_ID) {
                return ctx.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!");
            }

            const articles = db.get("articles").value();
            
            if (!articles.length) {
                return ctx.reply("üì≠ –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ.");
            }

            const buttons = articles.map(article => [
                Markup.button.callback(
                    `${article.status === 'pending' ? 'üïí' : '‚úÖ'} ${article.title}`,
                    `article_info_${article.id}`
                )
            ]);

            await ctx.replyWithMarkdown(
                "üìö *–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞*\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                Markup.inlineKeyboard(buttons)
            );

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤ /modpanel:", error);
            ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏.");
        }
    });

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—å–µ
    bot.action(/article_info_(\d+)/, async (ctx) => {
        try {
            if (ctx.from.id !== MODERATOR_ID) {
                return ctx.answerCbQuery("üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!", { show_alert: true });
            }

            const articleId = parseInt(ctx.match[1]);
            const article = db.get("articles").find({ id: articleId }).value();
            
            if (!article) {
                return ctx.answerCbQuery("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", { show_alert: true });
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã
            const designs = db.get("designs")
                .filter({ articleId: articleId })
                .value();

            await ctx.editMessageText(
                `üìå *–î–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—å–∏:*\n\n` +
                `üÜî ID: ${article.id}\n` +
                `üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}\n` +
                `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${article.description}\n` +
                `üîó –°—Å—ã–ª–∫–∞: ${article.link}\n` +
                `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(article.createdAt).toLocaleString()}\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${article.status}\n\n` +
                `üé® –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã (${designs.length}):\n` +
                designs.map(d => `‚ñ´Ô∏è ${d.status} | ${new Date(d.createdAt).toLocaleDateString()}`).join('\n'),
                {
                    parse_mode: "Markdown",
                    reply_markup: Markup.inlineKeyboard([
                        [
                            Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å', `delete_article_${article.id}`),
                            Markup.button.callback('üìù –°—Ç–∞—Ç—É—Å', `change_status_${article.id}`)
                        ],
                        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'modpanel')]
                    ]).reply_markup
                }
            );

            await ctx.answerCbQuery();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç—å–∏:", error);
            ctx.answerCbQuery("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!");
        }
    });

    // –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    bot.action(/change_status_(\d+)/, async (ctx) => {
        try {
            const articleId = parseInt(ctx.match[1]);
            
            await ctx.editMessageReplyMarkup(
                Markup.inlineKeyboard([
                    [
                        Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `set_status_approved_${articleId}`),
                        Markup.button.callback('üïí –í –æ–∂–∏–¥–∞–Ω–∏–∏', `set_status_pending_${articleId}`)
                    ],
                    [
                        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `set_status_rejected_${articleId}`),
                        Markup.button.callback('üîô –ù–∞–∑–∞–¥', `article_info_${articleId}`)
                    ]
                ])
            );

            await ctx.answerCbQuery();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
            ctx.answerCbQuery("‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤!");
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    bot.action(/set_status_(approved|pending|rejected)_(\d+)/, async (ctx) => {
        try {
            const status = ctx.match[1];
            const articleId = parseInt(ctx.match[2]);

            db.get("articles")
                .find({ id: articleId })
                .assign({ status: status })
                .write();

            await ctx.answerCbQuery(`‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`);
            ctx.editMessageText(
                ctx.update.callback_query.message.text + `\n\nüîÑ *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${status}`,
                { parse_mode: "Markdown" }
            );

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
            ctx.answerCbQuery("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!");
        }
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    bot.action(/delete_article_(\d+)/, async (ctx) => {
        try {
            const articleId = parseInt(ctx.match[1]);
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—å—é –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã
            db.get("articles").remove({ id: articleId }).write();
            db.get("designs").remove({ articleId: articleId }).write();

            await ctx.editMessageText(`‚ùå –°—Ç–∞—Ç—å—è #${articleId} –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã —É–¥–∞–ª–µ–Ω—ã!`);
            await ctx.answerCbQuery();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:", error);
            ctx.answerCbQuery("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!");
        }
    });

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    bot.action('modpanel', async (ctx) => {
        try {
            const articles = db.get("articles").value();
            
            const buttons = articles.map(article => [
                Markup.button.callback(
                    `${article.status === 'pending' ? 'üïí' : '‚úÖ'} ${article.title}`,
                    `article_info_${article.id}`
                )
            ]);

            await ctx.editMessageText(
                "üìö –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
                Markup.inlineKeyboard(buttons)
            );

            await ctx.answerCbQuery();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:", error);
            ctx.answerCbQuery("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞!");
        }
    });
}

module.exports = { moderatorHandler };
