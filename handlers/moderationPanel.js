
const { moderatorId } = require('../config');
const { db, getArticlesPage } = require('../database'); // –î–æ–±–∞–≤—å—Ç–µ db –≤ –∏–º–ø–æ—Ä—Ç

const ITEMS_PER_PAGE = 5;

function createArticlesKeyboard(articles, page, totalPages, currentFilter) {
  // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
  if (!articles.length) {
    return {
      inline_keyboard: [[{ text: 'üì≠ –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –ø—É—Å—Ç', callback_data: 'noop' }]]
    };
  }

  const buttons = articles.map(article => ([
    { 
      text: `${article.status === 'approved' ? '‚úÖ' : article.status === 'rejected' ? '‚ùå' : 'üïí'} ${article.title}`,
      callback_data: `article_detail_${article.id}`
    }
  ]));

  const navigation = [];
  if (page > 1) {
    navigation.push({ 
      text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 
      callback_data: `mod_page_${currentFilter}_${page - 1}` 
    });
  }
  if (page < totalPages) {
    navigation.push({ 
      text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 
      callback_data: `mod_page_${currentFilter}_${page + 1}` 
    });
  }

  return {
    inline_keyboard: [
      ...buttons,
      navigation.length > 0 ? navigation : [],
      [
        { text: '–í—Å–µ', callback_data: 'mod_filter_all_1' },
        { text: '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', callback_data: 'mod_filter_pending_1' },
        { text: '–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ', callback_data: 'mod_filter_approved_1' },
        { text: '–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ', callback_data: 'mod_filter_rejected_1' }
      ]
    ]
  };
}

module.exports = (bot) => {
    bot.command('moderate', async (ctx) => {
        console.log('[DEBUG] –ó–∞–ø—Ä–æ—Å /moderate –æ—Ç:', ctx.from.id);
        
        if (!ctx.isModerator) {
          console.log('[WARN] –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:', ctx.from.id);
          return ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!');
        }
    
        try {
          const result = getArticlesPage(1, ITEMS_PER_PAGE, 'all');
          console.log('[DEBUG] –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏:', result);
          
          await ctx.reply('üìÇ –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:', {
            reply_markup: createArticlesKeyboard(
              result.articles, 
              1, 
              result.totalPages, 
              'all'
            )
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ /moderate:', error);
          ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏');
        }
      });

  bot.action(/^mod_page_(.+)_(\d+)$/, async (ctx) => {
    const [filter, page] = ctx.match.slice(1);
    try {
      const result = getArticlesPage(parseInt(page), ITEMS_PER_PAGE, filter);
      await ctx.editMessageReplyMarkup(
        createArticlesKeyboard(result.articles, parseInt(page), result.totalPages, filter)
      );
      ctx.answerCbQuery();
    } catch (error) {
      console.error('Pagination error:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  });

  bot.action(/^mod_filter_(.+)_(\d+)$/, async (ctx) => {
    const [filter, page] = ctx.match.slice(1);
    try {
      const result = getArticlesPage(parseInt(page), ITEMS_PER_PAGE, filter);
      await ctx.editMessageReplyMarkup(
        createArticlesKeyboard(result.articles, parseInt(page), result.totalPages, filter)
      );
      ctx.answerCbQuery();
    } catch (error) {
      console.error('Filter error:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
    }
  });

  bot.action(/^article_detail_(\d+)$/, async (ctx) => {
    const articleId = parseInt(ctx.match[1]);
    try {
      const article = db.get('articles').find({ id: articleId }).value();
      
      const text = [
        `üìÑ *${article.title}*`,
        `üîó [–°—Å—ã–ª–∫–∞](${article.url})`,
        `üë§ –ê–≤—Ç–æ—Ä: @${article.user.username}`,
        `üìÖ –î–∞—Ç–∞: ${new Date(article.created_at).toLocaleDateString()}`,
        `–°—Ç–∞—Ç—É—Å: ${article.status === 'approved' ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' : article.status === 'rejected' ? '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞' : 'üïí –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}`
      ].join('\n');
  
      await ctx.editMessageText(text, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${articleId}` },
              { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${articleId}` },
              { 
                text: 'üë• –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω—ã', 
                callback_data: `show_designs_${articleId}`
            }
            ],
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'mod_back_to_list' }]
          ]
        }
      });
      ctx.answerCbQuery();
    } catch (error) {
      console.error('Detail error:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  });
  bot.action('mod_back_to_list', async (ctx) => {
    try {
      const result = getArticlesPage(1, ITEMS_PER_PAGE, 'all');
      await ctx.editMessageText('üìÇ –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:', {
        reply_markup: createArticlesKeyboard(result.articles, 1, result.totalPages, 'all')
      });
      ctx.answerCbQuery();
    } catch (error) {
      console.error('Back error:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  });
  bot.action(/^(approve|reject)_(\d+)$/, async (ctx) => {
    const [action, articleId] = ctx.match.slice(1);
    try {
      db.get('articles')
        .find({ id: parseInt(articleId) })
        .assign({ status: action === 'approve' ? 'approved' : 'rejected' })
        .write();
  
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const article = db.get('articles').find({ id: parseInt(articleId) }).value();
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [
          [
            { 
              text: `‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)`, 
              callback_data: `noop`
            }
          ],
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'mod_back_to_list' }]
        ]
      });
  
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
      await ctx.telegram.sendMessage(
        article.user.id,
        action === 'approve' 
          ? `‚úÖ –í–∞—à–∞ —Å—Ç–∞—Ç—å—è "${article.title}" –æ–¥–æ–±—Ä–µ–Ω–∞!` 
          : `‚ùå –°—Ç–∞—Ç—å—è "${article.title}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`
      );
  
      ctx.answerCbQuery(`–°—Ç–∞—Ç—å—è ${action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}`);
    } catch (error) {
      console.error('Status change error:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }
  });
};