const { db } = require('../database');
const { isModerator } = require('../config');
const { Design, Article, User } = require('../database/models');
const crypto = require('crypto');

const DESIGN_TIMEOUT = 604800000;

function generateSecureLink(article) {
    return `${article.url}?token=${crypto.randomBytes(16).toString('hex')}`;
}

module.exports = (bot) => {
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –∫–æ–Ω–∫—É—Ä—Å–æ–º
    bot.command('available_articles', async (ctx) => {
        try {
            const user = db.get('users').find({ id: ctx.from.id }).value();
            if (user?.blockedUntil && user.blockedUntil > Date.now()) {
                return ctx.reply('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
            }
    
            const articles = db.get('articles')
                .filter({ status: 'approved' })
                .value();
    
            if (!articles.length) {
                return ctx.reply('üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –¥–∏–∑–∞–π–Ω–∞');
            }
    
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
            const articlesWithStats = articles.map(article => {
                const activeDesigners = db.get('designs')
                    .filter({ 
                        articleId: article.id, 
                        status: 'pending' 
                    })
                    .size()
                    .value();
                return { ...article, activeDesigners };
            });
    
            // –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            const inlineKeyboard = articlesWithStats.map(article => [
                {
                    text: `${article.title} (üë• ${article.activeDesigners})`,
                    callback_data: `select_article_${article.id}`
                }
            ]);
    
            // // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
            // inlineKeyboard.push([
            //     { 
            //         text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
            //         callback_data: "refresh_articles" 
            //     }
            // ]);
    
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
            await ctx.replyWithMarkdown(
                `üé® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞*\n` +
                `_–¶–∏—Ñ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –Ω–∞–¥ —Å—Ç–∞—Ç—å–µ–π_`,
                {
                    reply_markup: {
                        inline_keyboard: inlineKeyboard
                    }
                }
            );
    
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π');
        }
    });

    // –í—ã–±–æ—Ä —Å—Ç–∞—Ç—å–∏ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å)
    bot.action(/^select_article_(\d+)$/, async (ctx) => {
        try {
            if (!ctx.session) ctx.session = {};
            const articleId = parseInt(ctx.match[1]);
            const article = db.get('articles').find({ id: articleId }).value();

            if (!article || article.status !== 'approved') {
                return ctx.answerCbQuery('‚ùå –°—Ç–∞—Ç—å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', { show_alert: true });
            }

            ctx.session = {
                selectedArticleId: articleId,
                accessToken: generateSecureLink(article),
                timestamp: Date.now()
            };

            await ctx.replyWithMarkdown(
                `üîí *${article.title}*\nüìù –°—Å—ã–ª–∫–∞: \`${ctx.session.accessToken}\`\n‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∏–∑–∞–π–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏`
            );

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞:', error);
            ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–∞–π–Ω–∞
    bot.on(['photo', 'document', 'text'], async (ctx) => {
        try {
            if (ctx.message.text?.startsWith('/')) return;
            if (!ctx.session?.selectedArticleId) {
                return ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é');
            }

            // –¢–∞–π–º-–∞—É—Ç
            if (Date.now() - ctx.session.timestamp > DESIGN_TIMEOUT) {
                delete ctx.session;
                return ctx.reply('‚åõ –í—Ä–µ–º—è –≤—ã—à–ª–æ!');
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            let fileUrl;
            if (ctx.message.photo) {
                fileUrl = await ctx.telegram.getFileLink(ctx.message.photo[0].file_id);
            } else if (ctx.message.document) {
                fileUrl = await ctx.telegram.getFileLink(ctx.message.document.file_id);
            } else if (ctx.message.text?.startsWith('http')) {
                fileUrl = ctx.message.text;
            } else {
                return ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞
            const newDesign = {
                id: Date.now(),
                articleId: ctx.session.selectedArticleId,
                designerId: ctx.from.id,
                fileUrl,
                status: 'pending',
                createdAt: Date.now(),
                reviewedAt: null
            };
            db.get('designs').push(newDesign).write();

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const activeDesigners = db.get('designs')
                .filter({ articleId: newDesign.articleId, status: 'pending' })
                .size()
                .value();

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
            await ctx.telegram.sendMessage(
                process.env.MODERATOR_ID,
                `üé® *–ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω*\n\n` +
                `üìù –°—Ç–∞—Ç—å—è: ${db.get('articles').find({ id: newDesign.articleId }).value().title}\n` +
                `üë§ –ê–≤—Ç–æ—Ä: @${ctx.from.username}\n` +
                `üîó –†–µ—Å—É—Ä—Å: ${fileUrl}\n` +
                `üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: ${activeDesigners} –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤`,
                { parse_mode: 'Markdown' }
            );

            await ctx.reply('‚úÖ –î–∏–∑–∞–π–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: ' + activeDesigners);
            delete ctx.session;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏
    bot.command('my_designs', async (ctx) => {
        try {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            const expiredDesigns = db.get('designs')
                .filter({
                    designerId: ctx.from.id,
                    status: 'pending'
                })
                .filter(d => Date.now() - d.createdAt > DESIGN_TIMEOUT)
                .value();

            expiredDesigns.forEach(d => {
                db.get('designs').remove({ id: d.id }).write();
            });

            // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
            const designs = db.get('designs')
                .filter({ designerId: ctx.from.id })
                .value();

            if (!designs.length) {
                return ctx.reply('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
            }

            const buttons = designs.map(d => ({
                text: `${d.status === 'pending' ? 'üïí' : '‚ùå'} –ó–∞–¥–∞–Ω–∏–µ #${d.id}`,
                callback_data: `design_${d.id}`
            }));

            await ctx.reply('üìÇ –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:', {
                reply_markup: { inline_keyboard: [buttons] }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π');
        }
    });

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞–Ω–∏—è
    bot.action(/^design_(\d+)$/, async (ctx) => {
        const design = db.get('designs').find({ id: parseInt(ctx.match[1]) }).value();
        const article = db.get('articles').find({ id: design.articleId }).value();

        await ctx.replyWithMarkdown(
            `*–°—Ç–∞—Ç—É—Å:* ${design.status}\n` +
            `*–°—Ç–∞—Ç—å—è:* ${article.title}\n` +
            `*–°—Å—ã–ª–∫–∞:* ${design.fileUrl}\n` +
            `*–°–æ–∑–¥–∞–Ω–æ:* ${new Date(design.createdAt).toLocaleString()}\n` +
            `${design.reviewedAt ? `*–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:* ${new Date(design.reviewedAt).toLocaleString()}\n` : ''}` +
            `${design.status === 'rejected' ? 'üõ†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ' : ''}`
        );
    });
};