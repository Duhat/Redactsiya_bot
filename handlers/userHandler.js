const { articles, logs } = require('../database'); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
const { moderatorId } = require('../config');

module.exports = (bot) => {
  bot.on('text', async (ctx) => {
    const [title, url] = ctx.message.text.split('\n');
    
    if (!title || !url) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n–ú–æ—è —Å—Ç–∞—Ç—å—è\nhttps://docs.google.com/...');
    }

    const newArticle = {
      id: Date.now(),
      user: ctx.from,
      title,
      url,
      status: 'pending',
      created_at: new Date().toISOString()
    };

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    articles.push(newArticle).write(); // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã lowdb
    
    logs.push({
      type: 'new_article',
      articleId: newArticle.id,
      timestamp: new Date().toISOString()
    }).write();

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await ctx.telegram.sendMessage(
      moderatorId,
      `üì® –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è:\n\nüè∑Ô∏è ${title}\nüîó ${url}\nüë§ ${ctx.from.username}`,
      {
        reply_markup: {
          inline_keyboard: [[
            { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${newArticle.id}` },
            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${newArticle.id}` }
          ]]
        }
      }
    );

    ctx.reply('‚è≥ –°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!');
  });
};