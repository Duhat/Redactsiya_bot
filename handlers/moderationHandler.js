const { db } = require('../database');
const { isModerator } = require('../config');

module.exports = (bot) => {
  bot.action(/^(approve|reject)_(\d+)$/, async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      if (!isModerator(ctx.from.id)) {
        return ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!', { show_alert: true });
      }

      const [action, articleId] = ctx.match.slice(1);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é
      const article = db.get('articles').find({ id: parseInt(articleId) }).value();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
      if (!article) {
        await ctx.answerCbQuery('‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true });
        return ctx.deleteMessage();
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–≤—Ç–æ—Ä–∞
      const user = db.get('users').find({ id: article.userId }).value();
      if (!user) {
        await ctx.answerCbQuery('‚ùå –ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
        return ctx.deleteMessage();
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞—Ç—å–∏
      db.get('articles')
        .find({ id: parseInt(articleId) })
        .assign({ 
          status: action === 'approve' ? 'approved' : 'rejected',
          updated_at: new Date().toISOString()
        })
        .write();

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π user.id)
      await ctx.telegram.sendMessage(
        user.id, // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ user
        `–í–∞—à–∞ —Å—Ç–∞—Ç—å—è "${article.title}" –±—ã–ª–∞ ` + 
        (action === 'approve' ? '‚úÖ –æ–¥–æ–±—Ä–µ–Ω–∞!' : '‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
      );

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      await ctx.editMessageReplyMarkup({
        inline_keyboard: [[
          { 
            text: action === 'approve' ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ' : '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', 
            callback_data: 'noop' 
          }
        ]]
      });

      ctx.answerCbQuery();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
      ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    }
  });
};