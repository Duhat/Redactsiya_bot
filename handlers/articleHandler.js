const { db } = require('../database');
const { isModerator } = require('../config');

module.exports = (bot) => {
  bot.on('text', async (ctx, next) => {
    const [title, url] = ctx.message.text.split('\n');
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!title || !url) return next();
    
    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
      const newArticle = {
        id: Date.now(),
        user: ctx.from,
        title: title.trim(),
        url: url.trim(),
        status: ctx.isModerator ? 'approved' : 'pending',
        created_at: new Date().toISOString(),
        updated_at: null
      };

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      db.get('articles').push(newArticle).write();

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(
        ctx.isModerator 
          ? '‚úÖ –°—Ç–∞—Ç—å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!' 
          : 'üì® –°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!'
      );

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
      if (!ctx.isModerator) {
        await ctx.telegram.sendMessage(
          process.env.MODERATOR_ID,
          `üì© *–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é*\n\n` +
          `üè∑Ô∏è ${newArticle.title}\n` +
          `üîó ${newArticle.url}\n` +
          `üë§ @${ctx.from.username}`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [[
                { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${newArticle.id}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${newArticle.id}` }
              ]]
            }
          }
        );
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:', error);
      ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π —Å—Ç–∞—Ç—å–∏');
    }
  });
};